class Point {
   has x : Number = 0
   has y : Number = 0

   our MODE : String = 'cool'

   static has DEBUG : Boolean = false

   static method __call() {
      self.new
   }

   method init() {
      MODE = 'awesome!'
      print("HELLS BELLS, this is ${MODE}", self, Point3D)
   }
   method move(x = 0, y = 0) {
      .x = x
      .y = y
   }
   has deep = { hop = 'jump' }
   method __persis() {
      var x = self.x
      var y = self.y
      var P = typeof(self)::__proto
      return function() {
         var p = newtable()
         p::x = x
         p::y = y
         setmetatable(p, P)
         return p
      }
   }
}
print("CLASS:", Point)

class Point3D from Point {
   has z : Number = 0
   method greet() {
      print("Hello World!")
   }
   method move(x = 0, y = 0, z = 0) {
      super.move(x, y)
      .z = z
   }
}

var a = [ ]
a.map(function() { })

var o = Point()
print("APPLY:", o)

var p = Point.new
var p = Point3D.new

print("HERE:", p)
p.move()
p.greet()
print("HERE2")

assert(p is Point3D)
assert(p is Point)
print(typeof(p))

for i = 1, 10_000_000 {
   p.move(i+1, i+2, i+3)
}

for k,v in p {
   print("${k} => ${v}")
}

try {
   p.z = "cheese"
}
catch (e : TypeError) {
   print("caught => ${e}")
}

