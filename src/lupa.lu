import Compiler from lupa.lang

global::package::path  = ";;./lib/?.lua;${global::package::path}"
global::package::cpath = ";;./lib/?.so;${global::package::cpath}"

var getopt = function(...args) {
   var opt = { files = [ ] }
   var idx = 0
   var len = args.len
   while idx < len {
      idx = idx + 1
      var arg = args[idx]
      if arg.sub(1,1) == '-' {
         var o = arg.sub(2)
         if o == 'o' {
            opt['o'] = true
         }
         else if o == 'l' {
            opt['l'] = true
         }
         else if o == 'b' {
            opt['b'] = true
         }
         else {
            error('unknown option: '~arg, 2)
         }
      }
      else {
         opt['files'].push(arg)
      }
   }
   return opt
}

var run = function(...a) {
   if a.len == 0 {
      var repl = require("lupa.repl")
      repl.run()
      os::exit(0)
   }
   var opt = getopt(...a)
   var sfh = assert(io::open(opt['files'][1]))
   var src = sfh.read('*a')
   sfh.close()

   var lua
   try {
      lua = Compiler.compile(src)
   }
   catch (e) {
      print(tostring(e))
      os::exit(-1)
   }
   if opt['l'] {
      io::stdout.write(lua, "\n")
      os::exit(0)
   }

   if opt['o'] {
      var out = opt['files'][2] || 'a.lua'
      out = io::open(out, "w+")
      out.write(lua)
      out.close()
   }
   else {
      lua = lua.gsub("^%s*#![^\n]*",'')
      var main = assert(loadstring(lua,'='~opt['files'][1]))
      if opt['b'] {
         var out = opt['files'][2] || 'a.luac'
         out = io::open(out, "wb+")
         out.write(string::dump(main))
         out.close()
      }
      else {
         xpcall(main, function(err) {
            io::stderr.write(debug::traceback(tostring(err)), "\n")
            os::exit(1)
         }, opt['files'][1], ...a)
      }
   }
}

if global::arg::[1] { run(global::unpack(arg)) }

