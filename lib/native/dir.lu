import FFI from std.ffi

if FFI::OS == 'OSX' {
   FFI cdef """
      typedef struct Dir_Entry {
           uint32_t d_ino;       // use 32 bit inodes for now
           uint16_t d_reclen;
           uint8_t  d_type;
           uint8_t  d_namlen;
           char     d_name[256];
      } dirent_t;
      int    chmod(const char *, mode_t);
      int    mkdir(const char *, mode_t);
      int    mkfifo(const char *, mode_t);
      int    mknod(const char *, mode_t, dev_t);
      mode_t umask(mode_t);
   """
}
else if FFI::OS == "Linux" {
   FFI cdef """
      typedef struct Dir_Entry {
         ino_t    d_ino;
         off_t    d_off;
         uint16_t d_reclen;
         uint8_t  d_type;
         char     d_name[256];
      } dirent_t;
   """
}
else {
   throw "unsupported OS: ${FFI::OS}"
}

FFI cdef """
   typedef struct Dir {
      int      fd;
      dirent_t d;
   } DIR;
   DIR *opendir(const char *dirname);
   dirent_t *readdir(DIR *dfd);
   int closedir(DIR *dfd);
"""

class Dir with FFI::MetaType['DIR'] {
   var C = FFI::C
   static method new(path : String = '.') {
      C::opendir(path)
   }
   static method open(path : String = '.') {
      C::opendir(path)
   }
   method read {
      C::readdir(self)
   }
   method close {
      C::closedir(self)
   }

   method scan(func : Function) {
      while true {
         var entry = self.read()
         if entry == nil { break }
         func(entry)
      }
   }

   self::__gc = C::closedir

   class Entry with FFI::MetaType['dirent_t'] {
      method ino {
         self::d_ino
      }
      method len {
         self::d_reclen
      }
      method name {
         FFI.string(self::d_name)
      }
      method type {
         self::d_type
      }
   }
}


