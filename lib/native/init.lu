export FFI, C

var ffi  = require('ffi')
var OS   = ffi::os
var ARCH = ffi::arch
var C    = ffi::C

object FFI {

   our OS   = ffi::os
   our ARCH = ffi::arch
   our C    = ffi::C

   method cdef(defs) {
      ffi::cdef(defs)
   }

   trait MetaType[T] {

      var ffi   = require('ffi')
      var C     = ffi::C
      our CTYPE = ffi::typeof(T)

      static method new(...args) {
         var inst = CTYPE()
         if self::__proto::init {
            self::__proto::init(inst, ...args)
         }
         return inst
      }

      static method __call(arg) {
         return ffi::cast(CTYPE, arg)
      }

      static method __coerce(arg) {
         return ffi::cast(CTYPE, arg)
      }
      static method __check(that) {
         return ffi::istype(T, that)
      }

      static method __finalize {
         FFI.metatype(CTYPE, self::__proto)
      }
      static method __extend {
         Error raise "cannot extend ${self} (wrapped CTYPE)"
      }
      self::__proto::__tostring = nil
      /*
      method __tostring {
         tostring(FFI.typeof(self))
      }
      */
   }

   method new(ctype, ...args) {
      ffi::new(ctype, ...args)
   }
   method cast(this, that) {
      ffi::cast(this, that)
   }
   method typeof(obj, nelem) {
      if nelem != nil {
         return ffi::typeof(obj, nelem)
      }
      else {
         return ffi::typeof(obj)
      }
   }
   method sizeof(obj) {
      ffi::sizeof(obj)
   }
   method alignof(obj) {
      ffi::sizeof(obj)
   }
   method istype(this, that) {
      ffi::istype(this, that)
   }
   method fill(dst, len, c) {
      if c != nil {
         return ffi::fill(dst, len, c)
      }
      else {
         return ffi::fill(dst, len)
      }
   }
   method cdef(defs) {
      ffi::cdef(defs)
   }
   method abi(param) {
      ffi::abi(param)
   }

   method metatype(ct, metatable) {
      ffi::metatype(ct, metatable)
   }

   method copy(dst, src, len) {
      if len != nil {
         return ffi::copy(dst, src, len)
      }
      else {
         return ffi::copy(dst, src)
      }
   }
   method string(obj, len) {
      if len != nil {
         return ffi::string(obj, len)
      }
      else {
         return ffi::string(obj)
      }
   }
   method gc(obj, fun) {
      ffi::gc(obj, fun)
   }
   method load(path, global) {
      ffi::load(path, global)
   }
   method errno(newerr) {
      if newerr != nil {
         return ffi::errno(newerr)
      }
      else {
         return ffi::errno()
      }
   }
   method offsetof(ct, field) {
      ffi::offsetof(ct, field)
   }
   method strerror(errnum) {
      var len = 256
      var buf = FFI.new('char[?]', len)
      FFI::C::strerror_r(errnum, buf, len)
      return FFI.string(buf)
   }
}

if FFI::OS == 'OSX' {
   FFI cdef """
      typedef uint32_t ino_t;
      typedef int64_t  off_t;
      typedef int32_t  dev_t;
      typedef uint32_t uid_t;
      typedef uint32_t gid_t;
      typedef uint16_t mode_t;
      typedef uint16_t nlink_t;
      typedef int64_t  blkcnt_t;
      typedef int32_t  blksize_t;
      typedef int32_t  suseconds_t;
      typedef uint32_t useconds_t;
   """
}
else if FFI::OS == 'Windows' {
   throw "NYI: ${FFI::OS} support"
}
else {
   FFI cdef """
      typedef unsigned long ino_t;
      typedef unsigned long nlink_t;

      typedef long off_t;
      typedef long blksize_t;
      typedef long blkcnt_t;

      typedef uint32_t mode_t;
      typedef uint32_t uid_t;
      typedef uint32_t gid_t;
      typedef uint64_t dev_t;

      typedef long suseconds_t;
      typedef unsigned long useconds_t;
   """
}
FFI cdef """
   typedef uint32_t id_t;
   typedef int32_t  pid_t;
   typedef int32_t  clockid_t;

   // 64 bit
   typedef uint64_t loff_t;
   typedef uint64_t off64_t;

   // typedefs which are word length
   typedef unsigned long size_t;
   typedef long ssize_t;
   typedef long kernel_off_t;
   typedef long time_t;
   typedef long clock_t;
   typedef unsigned long rlim_t;
   typedef unsigned long aio_context_t;
   typedef unsigned long nfds_t;

   // overridden (should be word length)
   typedef int32_t fd_mask;

   void *malloc(size_t);
   void *realloc(void *, size_t);
   void free(void *);
   int strerror_r(int errnum, char *strerrbuf, size_t buflen);
"""

